import React, { useEffect, useState } from "react";
import { FormField, Loader, RenderCards } from "../components";

const styles = {
  pgBtnStyle: "p-3 rounded-md bg-violet-500 w-24 text-white font-medium",
  currentPageNo: "cursor-pointer mx-5 font-medium",
};
const apiUrl = "http://localhost:8080/api/v1/post";

const Home = () => {
  //Loading and All posts retriveal states
  const [loading, setLoading] = useState(false);
  const [allPosts, setAllPosts] = useState([]);
  //Post Searching States
  const [searchText, setSearchText] = useState("");
  const [searchTimeout, setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);
  //Pagination States
  const [currentPage, setCurrentPage] = useState(1);
  const [postsPerPage, setPostsPerPage] = useState(10);
  const [total, setTotal] = useState(0);

  const fetchPosts = async () => {
    setLoading(true);

    try {
      const response = await fetch(
        // `https://dalle-arbb.onrender.com/api/v1/post?page=${currentPage}&limit=${postsPerPage}`,
        `${apiUrl}?page=${currentPage}&limit=${postsPerPage}`,
        {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        }
      );

      if (response.ok) {
        const result = await response.json();
        setAllPosts(result.data.reverse());
        setTotal(result.total);
      }
    } catch (err) {
      alert(err);
    } finally {
      setLoading(false);
    }
  };
  useEffect(() => {
    fetchPosts();
  }, [currentPage, postsPerPage]);

  //Page Number Calculation
  const pageNumbers = [];
  let lastPageValue;
  const totalPages = Math.ceil(total / postsPerPage);
  for (let i = 1; i <= totalPages; i++) {
    pageNumbers.push(i);
    lastPageValue = i;
  }

  const handleSearchChange = (e) => {
    clearTimeout(searchTimeout);
    setSearchText(e.target.value);

    setSearchTimeout(
      setTimeout(() => {
        const searchResult = allPosts.filter(
          (item) =>
            item.name.toLowerCase().includes(searchText.toLowerCase()) ||
            item.prompt.toLowerCase().includes(searchText.toLowerCase())
        );
        setSearchedResults(searchResult);
      }, 500)
    );
  };

  return (
    <section className="max-w-7xl mx-auto">
      <div>
        <h1 className="font-extrabold text-[#222328] text-[32px]">
          Community Gallery
        </h1>
        <p className="mt-2 text-[#666e75] text-[14px] max-w-[500px]">
          Browse through a collection of imaginative and visually stunning
          images generated by DALL-E AI
        </p>
      </div>

      <div className="mt-16">
        <FormField
          labelName="Search posts"
          type="text"
          name="text"
          placeholder="Search something in gallery..."
          value={searchText}
          handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className="flex justify-center items-center">
            <Loader />
          </div>
        ) : (
          <>
            {searchText && (
              <h2 className="font-medium text-[#666e75] text-xl mb-3">
                Showing Resuls for{" "}
                <span className="text-[#222328]">{searchText}</span>:
              </h2>
            )}
            <div className="grid lg:grid-cols-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3">
              {searchText ? (
                <RenderCards
                  data={searchedResults}
                  title="No Search Results Found"
                />
              ) : (
                <RenderCards data={allPosts} title="No Posts Yet" />
              )}
            </div>
          </>
        )}
      </div>
      {loading ? (
        <div className="flex justify-center items-center">
          <Loader />
        </div>
      ) : (
        <div className="mt-6 pb-4 flex justify-center items-center">
          <button
            className={styles.pgBtnStyle}
            disabled={currentPage === 1}
            onClick={() => {
              setCurrentPage(currentPage - 1);
              setLoading(true);
            }}
          >
            Previous
          </button>
          <span className={styles.currentPageNo}>
            Page {currentPage} of {lastPageValue}
          </span>
          <button
            className={styles.pgBtnStyle}
            disabled={currentPage === pageNumbers.length}
            onClick={() => {
              setCurrentPage(currentPage + 1);
              setLoading(true);
            }}
          >
            Next
          </button>
        </div>
      )}
    </section>
  );
};

export default Home;
